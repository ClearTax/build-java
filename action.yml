name: Build
description: Build the Java project

inputs:
  java_version:
    description: 'The java version to use'
    default: '17'
  java_distribution:
    description: 'The java distribution to use'
    default: 'zulu'
  maven_version:
    description: 'The maven version to use'
    default: '3.8.3'
  maven_flag:
    description: 'The maven flag to use'
    default: '-T 4C -B --no-transfer-progress'
  token:
    description: 'The GitHub token'
    required: true
  publish_artifacts:
    description: 'Publish the artifacts'
    default: 'false'
outputs:
  version:
    description: 'The version of the artifact'
    value: ${{ steps.set-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Set up JDK ${{ inputs.java_version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ inputs.java_version }}
        server-id: github
        distribution: ${{ inputs.java_distribution }}
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven
        restore-keys: |
          ${{ runner.os }}-maven
    - name: Set up Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.maven_version }}
    
    - name: Setup Git Config
      run: |
          git config --global user.email "clearci@cleartax.in"
          git config --global user.name "clearci"
      shell: bash

    - name: Check the source ref
      id: ref
      env: 
          HOTFIX: ${{ contains(github.ref, 'hotfix/') }}
          MASTER: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
      run: |
          echo ::set-output name=hotfix::$HOTFIX
          echo ::set-output name=master::$MASTER
      shell: bash

    - name: debug
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_ACTOR: clearci
      shell: bash
      run: |
         mvn ${{inputs.maven_flag}} --non-recursive \
              build-helper:parse-version  exec:exec \
              -Dexec.executable=echo \
              -Dexec.args='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0'
          sleep 300
    
    - name: Set Version
      id: set-version
      run: |
        if [[ "${{ steps.ref.outputs.master }}" == "true" ]]; then
            VERSION=$(mvn ${{inputs.maven_flag}} --non-recursive -q \
              build-helper:parse-version  exec:exec \
              -Dexec.executable=echo \
              -Dexec.args='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0')
        elif [[ "${{ steps.ref.outputs.hotfix }}" == "true" ]]; then 
            QUALIFIER=$(mvn ${{inputs.maven_flag}} --non-recursive -q \
              build-helper:parse-version  exec:exec \
              -Dexec.executable=echo \
              -Dexec.args='${parsedVersion.qualifier}')
            if [[ -z "$QUALIFIER" ]]; then
              mvn ${{inputs.maven_flag}} -q build-helper:parse-version \
                versions:set \
                -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT \
                versions:commit
              mvn ${{inputs.maven_flag}} -q scm:checkin -Dmessage="[ci skip] set snapshot version"
            fi
            VERSION=$(mvn ${{inputs.maven_flag}} help:evaluate -Dexpression=project.version -q -DforceStdout|sed 's/-SNAPSHOT//')
        else
            VERSION="dev-${GITHUB_SHA::8}"
        fi

        if [[ "x$VERSION" = "x" ]]; then
            echo "Not able to get the version"
            exit 1
        fi
        echo "::set-output name=version::$VERSION"
        echo "::notice title=Version::$VERSION"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_ACTOR: clearci
    
    - name: Build for production release
      if: ${{ steps.ref.outputs.master == 'true' || steps.ref.outputs.hotfix == 'true' }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_ACTOR: clearci
      run: |
        mvn -DskipTests ${{inputs.maven_flag}} -Darguments=-DskipTests \
          release:clean release:prepare \
          -DtagNameFormat="v@{project.version}" \
          -DscmCommentPrefix="[ci skip] " \
          -DreleaseVersion=${{ steps.set-version.outputs.version }} \
          -Dusername=clearci -Dpassword=${{ inputs.token }}
      shell: bash

    - name: Build for dev release
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_ACTOR: clearci
      if: ${{ steps.ref.outputs.master == 'false' && steps.ref.outputs.hotfix == 'false' }}
      run: mvn -DskipTests ${{inputs.maven_flag}} package
      shell: bash

    - name: Deploy Artifacts to Production
      if: ${{ ( steps.ref.outputs.master == 'true' || steps.ref.outputs.hotfix == 'true' ) && inputs.publish_artifacts == 'true' }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_ACTOR: clearci

      run: mvn -fn deploy --settings ./.mvn/settings.xml -T 4C -DskipTests --file pom.xml
      shell: bash

    - name: Upload artifacts 
      uses: 'actions/upload-artifact@v4'
      with:
        name: artifacts-${{github.run_id}}
        path: |
          ${{ github.workspace }}/**/*.jar
        retention-days: 1
